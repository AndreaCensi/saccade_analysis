#LyX 2.0.0alpha6 created this file. For more info see http://www.lyx.org/
\lyxformat 400
\begin_document
\begin_header
\textclass amsart
\begin_preamble
\input{sequence_analysis_preamble.tex}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
logicalmkup
\end_modules
\maintain_unincluded_children false
\language english
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_xetex false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Details on fairness and independence tests
\end_layout

\begin_layout Standard
Suppose we have a sequence 
\begin_inset Formula $\boldsymbol{x}=x_{1}x_{2}\dots x_{k}\dots x_{N}$
\end_inset

 of length 
\begin_inset Formula $N$
\end_inset

 consisting of the symbols 
\begin_inset Quotes eld
\end_inset

L
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

left
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

right
\begin_inset Quotes erd
\end_inset

).
 We want to investigate the statistical properties of such a sequence.
 
\end_layout

\begin_layout Standard
We define the quantity 
\begin_inset Formula $n_{S}$
\end_inset

 as the number of occurrences of the substring 
\begin_inset Formula $S$
\end_inset

 in 
\begin_inset Formula $\boldsymbol{x}$
\end_inset

.
 For example, 
\begin_inset Formula $n_{L}$
\end_inset

 is the number of 
\begin_inset Quotes eld
\end_inset

L
\begin_inset Quotes erd
\end_inset

 in the sequence, 
\begin_inset Formula $n_{LR}$
\end_inset

 is number of occurrences of 
\begin_inset Quotes eld
\end_inset

LR
\begin_inset Quotes erd
\end_inset

 in the sequence, and so on.
\end_layout

\begin_layout Subsection
Fairness test 
\end_layout

\begin_layout Standard
The first thing that we want to check is whether the sequence is fair.
 In this case, the null hypothesis is 
\begin_inset Quotes eld
\end_inset

The symbols are sampled independently from a Bernoulli distribution with
 
\begin_inset Formula $p=0.5$
\end_inset


\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
Under the null hypothesis, the variable 
\begin_inset Formula $n_{L}$
\end_inset

 is distributed according to a Binomial distribution:
\begin_inset Formula \begin{equation}
n_{L}\sim\mbox{Binomial}(N,p)\end{equation}

\end_inset

meaning that the probability density function is
\begin_inset Formula \[
p(\{n_{L}=k\})={N \choose k}\, p^{k}(1-p)^{N-k}.\]

\end_inset

In scipy, a two-sided p-value test can be done with:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy.stats import binom_test
\end_layout

\begin_layout Plain Layout

# Rejecting fairness
\end_layout

\begin_layout Plain Layout

fair_pvalue = binom_test(n_L, N, 0.5)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Independence test, with known 
\begin_inset Formula $p_{L}$
\end_inset


\end_layout

\begin_layout Standard
We consider now the null hypothesis: 
\begin_inset Quotes eld
\end_inset

The sequence is composed by independent samples from the same Bernoulli
 distribution (not necessarily with 
\begin_inset Formula $p=0.5$
\end_inset

).
\begin_inset Quotes erd
\end_inset

 In other words, while we acknowledge that a fly can be biased to turn in
 a certain direction, we exclude that the direction of a turn influences
 the next turn.
 Let 
\begin_inset Formula $p_{L}$
\end_inset

 be the probability of doing a left turn.
 For now, assume that we knew the probability
\begin_inset space ~
\end_inset


\begin_inset Formula $p_{L}$
\end_inset

.
\end_layout

\begin_layout Standard
What the model predict is that the probability that 
\begin_inset Formula $L$
\end_inset

 occurs is the same whether the previous value was 
\begin_inset Formula $R$
\end_inset

 or 
\begin_inset Formula $L$
\end_inset

:
\begin_inset Formula \begin{equation}
p(\{x_{k}=L\}|\{x_{k-1}=R\})=p_{L}\end{equation}

\end_inset


\begin_inset Formula \begin{equation}
p(\{x_{k}=L\}|\{x_{k-1}=L\})=p_{L}\end{equation}

\end_inset

Under the null hypothesis, we have the following predictions:
\begin_inset Formula \begin{equation}
n_{RL}\sim\mbox{Bernouilli}(n_{R},p_{L})\end{equation}

\end_inset


\begin_inset Formula \begin{equation}
n_{LL}\sim\mbox{Bernouilli}(n_{L},p_{L})\end{equation}

\end_inset

Moreover, 
\begin_inset Formula $n_{RL}$
\end_inset

 and 
\begin_inset Formula $n_{LL}$
\end_inset

 are two independent variables.
 
\end_layout

\begin_layout Standard
Therefore, we have available two independent tests.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# rejecting independence, if we knew p_L 
\end_layout

\begin_layout Plain Layout

RL_pvalue = binom_test(n_RL, n_R, p_L)
\end_layout

\begin_layout Plain Layout

LL_pvalue = binom_test(n_LL, n_L, p_L)
\end_layout

\begin_layout Plain Layout

# min -> any one can fail
\end_layout

\begin_layout Plain Layout

independent_pvalue = min( [ RL_pvalue, LL_pvalue ] )
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Independence test, with unknown 
\begin_inset Formula $p_{L}$
\end_inset


\end_layout

\begin_layout Standard
The last section assumed that we knew the value of 
\begin_inset Formula $p_{L}$
\end_inset

.
 However, we can only estimate it from the data, and at low sample sizes
 we have to take into account the uncertainty in that estimate.
 In fact, if we just estimate it from the data, run the tests and reject
 the hypothesis, it might have been because the
\begin_inset space ~
\end_inset


\begin_inset Formula $p_{L}$
\end_inset

 estimate is incorrect, rather than the sequence not being independent.
 
\end_layout

\begin_layout Standard
The strategy we devised is to estimate an interval of likely
\begin_inset space ~
\end_inset


\begin_inset Formula $p_{L}$
\end_inset

, and make sure that the test would fail for the whole range.
 This means that we compute the p-value for each 
\begin_inset Formula $p_{L}$
\end_inset

 in the range, and then take the maximum.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Get a confidence interval for p_L
\end_layout

\begin_layout Plain Layout

p_L_lb, p_L_ub = binofit(n_L, N, 0.01) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Try for each p_L in the range
\end_layout

\begin_layout Plain Layout

pvalues = []
\end_layout

\begin_layout Plain Layout

for p_L in linspace(p_L_lb, p_L_ub, 30):
\end_layout

\begin_layout Plain Layout

   # we check if any of the two is significant         
\end_layout

\begin_layout Plain Layout

   RL_pvalue_p = binom_test(n_RL, n_R, p)         
\end_layout

\begin_layout Plain Layout

   LL_pvalue_p = binom_test(n_LL, n_L, p)         
\end_layout

\begin_layout Plain Layout

   pvalue_p = min([ RL_pvalue_p, LL_pvalue_p ])         
\end_layout

\begin_layout Plain Layout

   # add to the array
\end_layout

\begin_layout Plain Layout

   pvalues.append(p)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# We take the **max** of those pvalues
\end_layout

\begin_layout Plain Layout

pvalue_independence = max(pvalues)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note on confidence intervals for binomial parameters: There is no closed
 form estimate for binomial confidence intervals; rather there are several
 approximations.
 We use the Clopper-Pearson interval method, that relates the binomial distribut
ion to the F distribution.
 It is also the method used by the binofit() Matlab function, that we ported
 to Python.
 This method is slightly conservative.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
"Accurate confidence intervals for binomial proportion and Poisson rate
 estimation" and 
\begin_inset Quotes eld
\end_inset

Confidence intervals for the binomial parameter
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
